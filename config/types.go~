package cmd

import (
	"sync"

	"github.com/gobwas/ws"
)

type Commands struct {
	Commands []string `yaml:"commands"`
}

//Stream struct holds details of outgoing streams
//Note that InputNames holds reformatted versions of the
//feed names read out of the "from" field in the config
//
//Example config YAML:
// ---
// streams:
//   -   to: "${relay}/${uuid}/${session}/front/medium"
//   	  serve: "${localhost}/front/medium"
//       from:
//         - audio
//         - videoFrontMedium
type StreamDetails struct {
	From       interface{} `yaml:"from"`
	InputNames []string
	Serve      string `yaml:"serve"`
	To         string `yaml:"to"`
}

type Streams struct {
	Stream []StreamDetails `yaml:"streams"`
}

type Endpoints map[string]string

type Packet struct {
	Data []byte
}

type FeedMap map[string][]chan Packet

type ClientMap map[string][]chan Packet

type ChannelDetails struct {
	Channel chan Packet
	From    string
	To      string
}

type message struct {
	sender clientDetails
	op     ws.OpCode
	data   []byte //text data are converted to/from bytes as needed
}

type clientDetails struct {
	name         string
	topic        string
	messagesChan chan message
}

// requests to add or delete subscribers are represented by this struct
type clientAction struct {
	action clientActionType
	client clientDetails
}

// userActionType represents the type of of action requested
type clientActionType int

// clientActionType constants
const (
	clientAdd clientActionType = iota
	clientDelete
)

type topicDirectory struct {
	sync.Mutex
	directory map[string][]clientDetails
}

// gobwas/ws
type readClientDataReturns struct {
	msg []byte
	op  ws.OpCode
	err error
}
